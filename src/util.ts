import { PNG } from "pngjs";
import path from "node:path";
import { deflate } from "zlib";
import imageSize from "image-size";
import { promisify } from "node:util";
import { createReadStream } from "node:fs";

const deflatePromisified = promisify(deflate);

export const MAX_IMAGE_WIDTH = 0x136;
export const MAX_IMAGE_HEIGHT = 0x191;

export async function validateImage(path: string) {
	const file = Bun.file(path);
	if (!(await file.exists()))
		return console.error("I could not find the file specified.");

	if(!path.endsWith(".png")) return console.error("The file must be a PNG file.");

	const verify = validateImageDimensions(path);
	if (!verify) return console.error("I could not find the file specified.");
	if (verify === "HEIGHT")
		return console.error(
			`The height is above the limit. (maximum ${MAX_IMAGE_HEIGHT} height x ${MAX_IMAGE_WIDTH} width)`
		);
	else if (verify === "WIDTH")
		return console.error(
			`The width is above the limit. (maximum ${MAX_IMAGE_HEIGHT} height x ${MAX_IMAGE_WIDTH} width)`
		);

	return verify;
}

export function validateImageDimensions(path: string) {
	const size = imageSize(path);
	if (!size || !size?.height || !size?.width) return false;
	if (MAX_IMAGE_HEIGHT < size.height) return "HEIGHT";
	if (MAX_IMAGE_WIDTH < size.width) return "WIDTH";
	return size;
}

export function getImageArray(
	filePath: string
): Promise<[Buffer, number, number]> {
	return new Promise((resolve) => {
		createReadStream(path.resolve(filePath))
			.pipe(
				new PNG({
					filterType: -1,
				})
			)
			.on("parsed", function () {
				resolve([this.data, this.width, this.height]);
			});
	});
}

export function convertRange(
	originalStart: number,
	originalEnd: number,
	newStart: number,
	newEnd: number,
	value: number
) {
	var scale = (newEnd - newStart) / (originalEnd - originalStart);
	return newStart + (value - originalStart) * scale;
}

// https://github.com/the6p4c/Kalkimg/blob/master/Kalkimg/C2PFile.cs
export async function transformImage(filePath: string) {
	const [buffer, width, height] = await getImageArray(filePath);
	const imageData = [];
	let imageDataIndex = 0;
	for (let y = 0; y < height; ++y) {
		for (let x = 0; x < width; ++x) {
			const idx = (width * y + x) << 2;
			const R = buffer[idx];
			const G = buffer[idx + 1];
			const B = buffer[idx + 2];
			const r = convertRange(0, 255, 0, 0x1f, R);
			const g = convertRange(0, 255, 0, 0x3f, G);
			const b = convertRange(0, 255, 0, 0x1f, B);

			const rgb565 = (r << 11) + (g << 5) + b;
			const rgb565_2 = (rgb565 >> 8) & 0xff;
			const rgb565_1 = rgb565 & 0xff;

			imageData[imageDataIndex] = rgb565_2;
			imageData[imageDataIndex + 1] = rgb565_1;

			imageDataIndex += 2;
		}
	}

	return Buffer.from(imageData);
}

export function compressWithZlib(buffer: Buffer) {
	return deflatePromisified(buffer);
}

export function getHeader(
	imageDataSize: number,
	width: number,
	height: number
) {
	const fileSize = imageDataSize + 0xdc + 0x17c;

	const a = ~(fileSize & 0xffffff) & 0xffffff;
	const a3 = (a >> 16) & 0xff;
	const a2 = (a >> 8) & 0xff;
	const a1 = a & 0xff;

	const b1 = (0x1d1 - (fileSize & 0xff)) & 0xff;

	const c = fileSize - 0x20;
	const c4 = (c >> 24) & 0xff;
	const c3 = (c >> 16) & 0xff;
	const c2 = (c >> 8) & 0xff;
	const c1 = c & 0xff;

	const d = fileSize - 0x234;
	const d4 = (d >> 24) & 0xff;
	const d3 = (d >> 16) & 0xff;
	const d2 = (d >> 8) & 0xff;
	const d1 = d & 0xff;

	const e = fileSize - 0x254;
	const e4 = (e >> 24) & 0xff;
	const e3 = (e >> 16) & 0xff;
	const e2 = (e >> 8) & 0xff;
	const e1 = e & 0xff;

	const w = width & 0xffff;
	const h = height & 0xffff;
	const w2 = (w >> 8) & 0xff;
	const w1 = w & 0xff;
	const h2 = (h >> 8) & 0xff;
	const h1 = h & 0xff;

	const f = fileSize - 0x258;
	const f4 = (f >> 24) & 0xff;
	const f3 = (f >> 16) & 0xff;
	const f2 = (f >> 8) & 0xff;
	const f1 = f & 0xff;

	return Buffer.from([
		0xbc,
		0xbe,
		0xac,
		0xb6,
		0xb0,
		0xff,
		0xff,
		0xff,
		0x9c,
		0xcd,
		0x8f,
		0xff,
		0xff,
		0xff,
		0xff,
		0xff,
		0xff,
		0xfe,
		0xff,
		0xef,
		0xff,
		0xfe,
		0xff,
		a3,
		a2,
		a1,
		b1,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x43,
		0x43,
		0x30,
		0x31,
		0x30,
		0x30,
		0x43,
		0x6f,
		0x6c,
		0x6f,
		0x72,
		0x43,
		0x50,
		0x00,
		0x00,
		0x00,
		c4,
		c3,
		c2,
		c1,
		0x00,
		0x00,
		0x00,
		0x09,
		d4,
		d3,
		d2,
		d1,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x01,
		0x7c,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x00,
		0x30,
		0x31,
		0x30,
		0x30,
		e4,
		e3,
		e2,
		e1,
		0x00,
		0x00,
		w2,
		w1,
		h2,
		h1,
		0x00,
		0x10,
		0x00,
		0xff,
		0x00,
		0xff,
		0x00,
		0xff,
		0x00,
		0xff,
		0x00,
		0x01,
		0x00,
		0xff,
		0xff,
		0xff,
		0xff,
		0xff,
		f4,
		f3,
		f2,
		f1,
	]);
}

export function getFooter() {
	return Buffer.from([
		0x30, 0x31, 0x30, 0x30, 0x00, 0x00, 0x00, 0x8c, 0x07, 0x70, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x07, 0x70, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x05, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x98, 0x04, 0x60, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x04, 0x60, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x05, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x98, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x28, 0x31, 0x85,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x06, 0x28, 0x32, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x98, 0x00, 0x00, 0xff, 0xff,
		0xff, 0xff, 0xff, 0xff, 0x30, 0x31, 0x30, 0x30, 0xe0, 0x00, 0x00, 0x00,
		0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00,
		0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,
		0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,
		0x02, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x01,
		0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00,
		0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,
		0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,
		0x02, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x01,
		0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00,
		0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,
		0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,
		0x02, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x01,
		0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x01,
		0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x01,
		0x03, 0x14, 0x15, 0x93, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00,
		0x03, 0x14, 0x15, 0x93, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,
		0x03, 0x14, 0x15, 0x93, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00,
		0x03, 0x14, 0x15, 0x93, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,
		0x01, 0x01, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff,
	]);
}
